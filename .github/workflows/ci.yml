name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
        pip install intervaltree  # Additional test dependency
        pip install openpyxl      # For Excel export tests
        pip install pyarrow       # For Parquet export tests
    
    - name: Install package in development mode
      run: |
        pip install -e .
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install intervaltree openpyxl pyarrow
        pip install -e .
    
    - name: Create test data
      run: |
        echo ">test_g4_sequence" > test_integration.fa
        echo "GGGTTTGGGTTTGGGTTTGGGAAATTTCCCAAATTTCCCAAATTTCCC" >> test_integration.fa
        echo ">test_curved_sequence" >> test_integration.fa
        echo "AAAAAAAAATGCGTAAAAAAAAAATGCGTAAAAAAAAAATGCGT" >> test_integration.fa
    
    - name: Test orchestrator CLI
      run: |
        python orchestrator.py --fasta test_integration.fa --out integration_test --workers 2 --log-level INFO
    
    - name: Verify output files
      run: |
        ls -la integration_test.*
        [ -f integration_test.csv ] || exit 1
        [ -f integration_test.gff3 ] || exit 1
        [ -s integration_test.csv ] || exit 1  # File should not be empty
    
    - name: Test Streamlit app (smoke test)
      run: |
        # Install streamlit for app testing
        pip install streamlit
        # Just check that the app loads without errors
        timeout 30s streamlit run app_streamlit.py --server.headless true --server.port 8502 || true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install intervaltree openpyxl pyarrow
        pip install -e .
    
    - name: Create performance test data
      run: |
        python -c "
import random
sequences = []
for i in range(10):
    # Generate random sequence with embedded motifs
    seq = ''.join(random.choices('ATCG', k=5000))
    # Add some G4 motifs
    seq = seq[:1000] + 'GGGTTTGGGTTTGGGTTTGGG' + seq[1000:]
    sequences.append(f'>perf_seq_{i}\n{seq}')
with open('perf_test.fa', 'w') as f:
    f.write('\n'.join(sequences))
        "
    
    - name: Run performance test
      run: |
        time python orchestrator.py --fasta perf_test.fa --out perf_results --workers 4
    
    - name: Check performance results
      run: |
        echo "Performance test completed"
        wc -l perf_results.csv
        ls -lh perf_results.*